name: Maven Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  fork:
    types: [ created ]
  issues:
    types: [ opened ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        env:
          RUNNER_OS: ${{ runner.os }}
          HASH_FILES: ${{ hashFiles('**/pom.xml') }}
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: $RUNNER_OS-maven-$HASH_FILES
          restore-keys: |
            $RUNNER_OS-maven-

      - name: Build with Maven
        run: mvn clean install

      - name: Run tests
        run: mvn test
        continue-on-error: true  # Continue si le test plante

  # Job pour uploader l'artefact du build
  upload-artifact:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artefact
          path: target/*.jar

  # Job pour envoyer un message lors du fork
  message-on-fork:

    if: github.event_name == 'fork'
    runs-on: ubuntu-latest
    steps:
      - name: Send fork message
        env:
          ACTOR: ${{ github.actor }}
        run: echo "Merci pour le fork, $ACTOR ! Nous espérons que vous apprécierez le projet."

  # Job pour envoyer un message lors de l'ouverture d'une issue
  message-on-issue:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Send issue message
        env:
          USER_LOGIN: ${{ github.event.issue.user.login }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run:
          echo "Bonjour $USER_LOGIN, nous avons bien pris en compte votre problème:\ $ISSUE_TITLE."
  login:
    runs-on: ubuntu-latest
    needs: upload-artifact
    env:
      USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/api_spring_test
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}
      - name: checkout code
        uses: actions/checkout@v4
      - name: build docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .
      - name: push dockerhub
        run: docker push ${{ env.IMAGE_NAME }}